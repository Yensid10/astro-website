---
import Footer from '../components/Footer.astro'
import Navbar from '../components/Navbar.astro'
import { capitalizeFirstLetter, currentPage } from '../utils'

import 'instantsearch.css/themes/satellite.css'
import '../algolia.css'
import { getImage } from '@astrojs/image'

type LayoutProps = {
  title?: string
  navbar?: boolean
  navbarNoBg?: boolean
  ogImage?: string
  ogTitle?: string
  ogDescription?: string
}

const url = new URL(Astro.request.url)
const currentPageName =
  currentPage(url.pathname) || (url.pathname === '/' && 'home')

type Metadata = {
  homepage: {
    featuredBlogs: string[]
    featuredCaseStudies: string[]
  }
  navbar: { label: string; href: string }[]
  footer: { label: string; href: string; flag?: string }[]
  seo: Record<string, { description: string; image?: string }>
}

const { title, navbar, navbarNoBg, ogImage, ogTitle, ogDescription } =
  Astro.props as LayoutProps

const [{ seo }] = await Astro.glob<Metadata>('../data/metadata.json')

if (!seo[currentPageName]) {
  console.warn('The page: ' + currentPageName + " doesn't have metadata.")
}

const currentDescription =
  ogDescription ?? (seo[currentPageName] && seo[currentPageName].description)

const enableDarkMode =
  Astro.url.pathname.includes('/blog') ||
  Astro.url.pathname.includes('/clojure-in')

// image attributes must be all jpgs and located in src/assets/site/ dir
let imageForShare
if (seo[currentPageName] && seo[currentPageName].image) {
  const imgNoExt = seo[currentPageName].image.split('.').slice(0, -1).join('.')
  let importedPic = await import(`../assets/site/${imgNoExt}.jpg`)
  imageForShare = `${url.origin}${importedPic.default.src}`
} else if (ogImage) {
  // would be nice not to hardcode blog here, but then vite can't do the dynamic import...
  // this whole dynamic import thing is nasty anyway, probably its better to
  // have a seperate step for images outside astro, though the astro people say
  // they're going to fix this soon so ü§∑‚Äç‚ôÇÔ∏è
  const img = await import(`../assets/blog/${ogImage}.jpg`)
  const { src } = await getImage({
    src: img.default.src,
    alt: ogTitle ?? currentPageName,
    width: 1200,
    height: 630
  })
  imageForShare = `${url.origin}${src}`
}
---

<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    {currentDescription && (
      <meta name='description' content={currentDescription} />
    )}
    <!-- Meta Tags -->
    <meta property='og:url' content={url.href} />
    <meta property='og:type' content='website' />
    <meta property='og:title' content={ogTitle ?? currentPageName} />
    {currentDescription && (
      <meta property='og:description' content={currentDescription} />
    )}
    {imageForShare && <meta property='og:image' content={imageForShare} />}
    {imageForShare && (
      <meta property='og:image:secure_url' content={imageForShare} />
    )}

    <!-- Twitter Meta Tags -->
    <meta name='twitter:card' content='summary_large_image' />
    <meta property='twitter:domain' content={url.hostname} />
    <meta property='twitter:url' content={url.href} />
    <meta name='twitter:title' content={currentPageName} />
    {currentDescription && (
      <meta name='twitter:description' content={currentDescription} />
    )}
    {imageForShare && <meta name='twitter:image' content={imageForShare} />}

    <meta name='viewport' content='width=device-width' />
    <link href='/images/favicon.png' rel='shortcut icon' type='image/x-icon' />
    <link href='/images/favicon-apple.svg' rel='apple-touch-icon' />
    <link rel='stylesheet' href='/styles/inter.css' />
    <link rel='stylesheet' href='/styles/global.css' />
    <link rel='stylesheet' href='/styles/katex.min.css' />

    <title>{title || capitalizeFirstLetter(currentPageName)}</title>
    <!-- This is intentionally inlined to avoid FOUC -->
    <script>
      const root = document.documentElement
      const theme = localStorage.getItem('theme')
      if (
        theme === 'dark' ||
        (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        root.classList.add('dark')
        document.documentElement.style.setProperty('color-scheme', 'dark')
      } else {
        document.documentElement.style.setProperty('color-scheme', 'light')
        root.classList.remove('dark')
      }
    </script>
    <style>
      html {
        scroll-behavior: smooth;
      }
    </style>
    <script type='text/javascript'>
      var _paq = (window._paq = window._paq || [])
      /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
      _paq.push(['setCookieDomain', '*.juxt.pro'])
      _paq.push(['setDomains', ['*.juxt.pro', '*.www.juxt.pro']])
      _paq.push(['trackPageView'])
      _paq.push(['enableLinkTracking'])
      ;(function () {
        var u = '//bunseki.juxt.pro/'
        _paq.push(['setTrackerUrl', u + 'm.php'])
        _paq.push(['setSiteId', '2'])
        var d = document,
          g = d.createElement('script'),
          s = d.getElementsByTagName('script')[0]
        g.type = 'text/javascript'
        g.async = true
        g.src = u + '/js'
        s.parentNode.insertBefore(g, s)
      })()
    </script>
  </head>
  <body
    class:list={[
      'bg-gray-50 transition-colors',
      { 'dark:bg-gray-900': enableDarkMode }
    ]}
  >
    {navbar && <Navbar navbarNoBg={navbarNoBg} />}
    <div class:list={[{ 'pt-14': !navbarNoBg }]}>
      <slot />
      <Footer />
    </div>
  </body>
</html>
